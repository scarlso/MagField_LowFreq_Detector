C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DELAY_PWM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Delay_PWM.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\Delay_PWM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Delay_PWM.lst) CD DB NOIP 
                    -OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Delay_PWM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Delay_PWM.c  
   3          * Version 3.0
   4          *
   5          * Description:
   6          *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7          *  comparitors. Each instance of this user module is capable of generating
   8          *  two PWM outputs with the same period. The pulse width is selectable between
   9          *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks. 
  10          *  The compare value output may be configured to be active when the present 
  11          *  counter is less than or less than/equal to the compare value.
  12          *  A terminal count output is also provided. It generates a pulse one clock
  13          *  width wide when the counter is equal to zero.
  14          *
  15          * Note:
  16          *
  17          *******************************************************************************
  18          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions, 
  20          * disclaimers, and limitations in the end user license agreement accompanying 
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "cytypes.h"
  25          #include "Delay_PWM.h"
  26          
  27          uint8 Delay_PWM_initVar = 0u;
  28          
  29          
  30          /*******************************************************************************
  31          * Function Name: Delay_PWM_Start
  32          ********************************************************************************
  33          *
  34          * Summary:
  35          *  The start function initializes the pwm with the default values, the 
  36          *  enables the counter to begin counting.  It does not enable interrupts,
  37          *  the EnableInt command should be called if interrupt generation is required.
  38          *
  39          * Parameters:  
  40          *  None  
  41          *
  42          * Return: 
  43          *  None
  44          *
  45          * Global variables:
  46          *  Delay_PWM_initVar: Is modified when this function is called for the 
  47          *   first time. Is used to ensure that initialization happens only once.
  48          *
  49          *******************************************************************************/
  50          void Delay_PWM_Start(void) 
  51          {
  52   1          /* If not Initialized then initialize all required hardware and software */
  53   1          if(Delay_PWM_initVar == 0u)
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 2   

  54   1          {
  55   2              Delay_PWM_Init();
  56   2              Delay_PWM_initVar = 1u;
  57   2          }
  58   1          Delay_PWM_Enable();
  59   1      
  60   1      }
  61          
  62          
  63          /*******************************************************************************
  64          * Function Name: Delay_PWM_Init
  65          ********************************************************************************
  66          *
  67          * Summary:
  68          *  Initialize component's parameters to the parameters set by user in the 
  69          *  customizer of the component placed onto schematic. Usually called in 
  70          *  Delay_PWM_Start().
  71          *
  72          * Parameters:  
  73          *  None
  74          *
  75          * Return: 
  76          *  None
  77          *
  78          *******************************************************************************/
  79          void Delay_PWM_Init(void) 
  80          {
  81   1          #if (Delay_PWM_UsingFixedFunction || Delay_PWM_UseControl)
  82   1              uint8 ctrl;
  83   1          #endif /* (Delay_PWM_UsingFixedFunction || Delay_PWM_UseControl) */
  84   1          
  85   1          #if(!Delay_PWM_UsingFixedFunction) 
  86   1              #if(Delay_PWM_UseStatus)
  87   1                  /* Interrupt State Backup for Critical Region*/
  88   1                  uint8 Delay_PWM_interruptState;
  89   1              #endif /* (Delay_PWM_UseStatus) */
  90   1          #endif /* (!Delay_PWM_UsingFixedFunction) */
  91   1          
  92   1          #if (Delay_PWM_UsingFixedFunction)
                      /* You are allowed to write the compare value (FF only) */
                      Delay_PWM_CONTROL |= Delay_PWM_CFG0_MODE;
                      #if (Delay_PWM_DeadBand2_4)
                          Delay_PWM_CONTROL |= Delay_PWM_CFG0_DB;
                      #endif /* (Delay_PWM_DeadBand2_4) */
                              
                      ctrl = Delay_PWM_CONTROL3 & ((uint8 )(~Delay_PWM_CTRL_CMPMODE1_MASK));
                      Delay_PWM_CONTROL3 = ctrl | Delay_PWM_DEFAULT_COMPARE1_MODE;
                      
                       /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                      Delay_PWM_RT1 &= ((uint8)(~Delay_PWM_RT1_MASK));
                      Delay_PWM_RT1 |= Delay_PWM_SYNC;     
                              
                      /*Enable DSI Sync all all inputs of the PWM*/
                      Delay_PWM_RT1 &= ((uint8)(~Delay_PWM_SYNCDSI_MASK));
                      Delay_PWM_RT1 |= Delay_PWM_SYNCDSI_EN;
                     
                  #elif (Delay_PWM_UseControl)
 111   1              /* Set the default compare mode defined in the parameter */
 112   1              ctrl = Delay_PWM_CONTROL & ((uint8)(~Delay_PWM_CTRL_CMPMODE2_MASK)) & ((uint8)(~Delay_PWM_CTRL_CMP
             -MODE1_MASK));
 113   1              Delay_PWM_CONTROL = ctrl | Delay_PWM_DEFAULT_COMPARE2_MODE | 
 114   1                                         Delay_PWM_DEFAULT_COMPARE1_MODE;
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 3   

 115   1          #endif /* (Delay_PWM_UsingFixedFunction) */
 116   1              
 117   1          #if (!Delay_PWM_UsingFixedFunction)
 118   1              #if (Delay_PWM_Resolution == 8)
 119   1                  /* Set FIFO 0 to 1 byte register for period*/
 120   1                  Delay_PWM_AUX_CONTROLDP0 |= (Delay_PWM_AUX_CTRL_FIFO0_CLR);
 121   1              #else /* (Delay_PWM_Resolution == 16)*/
                          /* Set FIFO 0 to 1 byte register for period */
                          Delay_PWM_AUX_CONTROLDP0 |= (Delay_PWM_AUX_CTRL_FIFO0_CLR);
                          Delay_PWM_AUX_CONTROLDP1 |= (Delay_PWM_AUX_CTRL_FIFO0_CLR);
                      #endif /* (Delay_PWM_Resolution == 8) */
 126   1      
 127   1              Delay_PWM_WriteCounter(Delay_PWM_INIT_PERIOD_VALUE);
 128   1          #endif /* (!Delay_PWM_UsingFixedFunction) */
 129   1              
 130   1          Delay_PWM_WritePeriod(Delay_PWM_INIT_PERIOD_VALUE);
 131   1      
 132   1              #if (Delay_PWM_UseOneCompareMode)
 133   1                  Delay_PWM_WriteCompare(Delay_PWM_INIT_COMPARE_VALUE1);
 134   1              #else
                          Delay_PWM_WriteCompare1(Delay_PWM_INIT_COMPARE_VALUE1);
                          Delay_PWM_WriteCompare2(Delay_PWM_INIT_COMPARE_VALUE2);
                      #endif /* (Delay_PWM_UseOneCompareMode) */
 138   1              
 139   1              #if (Delay_PWM_KillModeMinTime)
                          Delay_PWM_WriteKillTime(Delay_PWM_MinimumKillTime);
                      #endif /* (Delay_PWM_KillModeMinTime) */
 142   1              
 143   1              #if (Delay_PWM_DeadBandUsed)
                          Delay_PWM_WriteDeadTime(Delay_PWM_INIT_DEAD_TIME);
                      #endif /* (Delay_PWM_DeadBandUsed) */
 146   1      
 147   1          #if (Delay_PWM_UseStatus || Delay_PWM_UsingFixedFunction)
 148   1              Delay_PWM_SetInterruptMode(Delay_PWM_INIT_INTERRUPTS_MODE);
 149   1          #endif /* (Delay_PWM_UseStatus || Delay_PWM_UsingFixedFunction) */
 150   1              
 151   1          #if (Delay_PWM_UsingFixedFunction)
                      /* Globally Enable the Fixed Function Block chosen */
                      Delay_PWM_GLOBAL_ENABLE |= Delay_PWM_BLOCK_EN_MASK;
                      /* Set the Interrupt source to come from the status register */
                      Delay_PWM_CONTROL2 |= Delay_PWM_CTRL2_IRQ_SEL;
                  #else
 157   1              #if(Delay_PWM_UseStatus)
 158   1                  
 159   1                  /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
 160   1                  /* Enter Critical Region*/
 161   1                  Delay_PWM_interruptState = CyEnterCriticalSection();
 162   1                  /* Use the interrupt output of the status register for IRQ output */
 163   1                  Delay_PWM_STATUS_AUX_CTRL |= Delay_PWM_STATUS_ACTL_INT_EN_MASK;
 164   1                  
 165   1                   /* Exit Critical Region*/
 166   1                  CyExitCriticalSection(Delay_PWM_interruptState);
 167   1                  
 168   1                  /* Clear the FIFO to enable the Delay_PWM_STATUS_FIFOFULL
 169   1                         bit to be set on FIFO full. */
 170   1                  Delay_PWM_ClearFIFO();
 171   1              #endif /* (Delay_PWM_UseStatus) */
 172   1          #endif /* (Delay_PWM_UsingFixedFunction) */
 173   1      }
 174          
 175          
 176          /*******************************************************************************
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 4   

 177          * Function Name: Delay_PWM_Enable
 178          ********************************************************************************
 179          *
 180          * Summary: 
 181          *  Enables the PWM block operation
 182          *
 183          * Parameters:  
 184          *  None
 185          *
 186          * Return: 
 187          *  None
 188          *
 189          * Side Effects: 
 190          *  This works only if software enable mode is chosen
 191          *
 192          *******************************************************************************/
 193          void Delay_PWM_Enable(void) 
 194          {
 195   1          /* Globally Enable the Fixed Function Block chosen */
 196   1          #if (Delay_PWM_UsingFixedFunction)
                      Delay_PWM_GLOBAL_ENABLE |= Delay_PWM_BLOCK_EN_MASK;
                      Delay_PWM_GLOBAL_STBY_ENABLE |= Delay_PWM_BLOCK_STBY_EN_MASK;
                  #endif /* (Delay_PWM_UsingFixedFunction) */
 200   1          
 201   1          /* Enable the PWM from the control register  */
 202   1          #if (Delay_PWM_UseControl || Delay_PWM_UsingFixedFunction)
 203   1              Delay_PWM_CONTROL |= Delay_PWM_CTRL_ENABLE;
 204   1          #endif /* (Delay_PWM_UseControl || Delay_PWM_UsingFixedFunction) */
 205   1      }
 206          
 207          
 208          /*******************************************************************************
 209          * Function Name: Delay_PWM_Stop
 210          ********************************************************************************
 211          *
 212          * Summary:
 213          *  The stop function halts the PWM, but does not change any modes or disable
 214          *  interrupts.
 215          *
 216          * Parameters:  
 217          *  None  
 218          *
 219          * Return: 
 220          *  None
 221          *
 222          * Side Effects:
 223          *  If the Enable mode is set to Hardware only then this function
 224          *  has no effect on the operation of the PWM
 225          *
 226          *******************************************************************************/
 227          void Delay_PWM_Stop(void) 
 228          {
 229   1          #if (Delay_PWM_UseControl || Delay_PWM_UsingFixedFunction)
 230   1              Delay_PWM_CONTROL &= ((uint8)(~Delay_PWM_CTRL_ENABLE));
 231   1          #endif /* (Delay_PWM_UseControl || Delay_PWM_UsingFixedFunction) */
 232   1          
 233   1          /* Globally disable the Fixed Function Block chosen */
 234   1          #if (Delay_PWM_UsingFixedFunction)
                      Delay_PWM_GLOBAL_ENABLE &= ((uint8)(~Delay_PWM_BLOCK_EN_MASK));
                      Delay_PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~Delay_PWM_BLOCK_STBY_EN_MASK));
                  #endif /* (Delay_PWM_UsingFixedFunction) */
 238   1      }
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 5   

 239          
 240          
 241          #if (Delay_PWM_UseOneCompareMode)
 242                  #if (Delay_PWM_CompareMode1SW)
              
              
                              /*******************************************************************************
                              * Function Name: Delay_PWM_SetCompareMode
                              ********************************************************************************
                              * 
                              * Summary:
                              *  This function writes the Compare Mode for the pwm output when in Dither mode,
                              *  Center Align Mode or One Output Mode.
                              *
                              * Parameters:
                              *  comparemode:  The new compare mode for the PWM output. Use the compare types
                              *                defined in the H file as input arguments.
                              *
                              * Return:
                              *  None
                              *
                              *******************************************************************************/
                              void Delay_PWM_SetCompareMode(uint8 comparemode) 
                              {
                                  #if(Delay_PWM_UsingFixedFunction)
                          
                              #if(0 != Delay_PWM_CTRL_CMPMODE1_SHIFT)
                                  uint8 comparemodemasked = ((uint8)((uint8)comparemode << Delay_PWM_CTRL_CMPMODE1_SHIFT
             -));
                              #else
                                  uint8 comparemodemasked = comparemode;
                              #endif /* (0 != Delay_PWM_CTRL_CMPMODE1_SHIFT) */
                          
                                  Delay_PWM_CONTROL3 &= ((uint8)(~Delay_PWM_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
                                  Delay_PWM_CONTROL3 |= comparemodemasked;     
                                              
                                  #elif (Delay_PWM_UseControl)
                                      
                              #if(0 != Delay_PWM_CTRL_CMPMODE1_SHIFT)
                                  uint8 comparemode1masked = ((uint8)((uint8)comparemode << Delay_PWM_CTRL_CMPMODE1_SHIF
             -T)) & 
                                                                  Delay_PWM_CTRL_CMPMODE1_MASK;
                              #else
                                  uint8 comparemode1masked = comparemode & Delay_PWM_CTRL_CMPMODE1_MASK;                
                              #endif /* (0 != Delay_PWM_CTRL_CMPMODE1_SHIFT) */
                              
                              #if(0 != Delay_PWM_CTRL_CMPMODE2_SHIFT)                            
                                      uint8 comparemode2masked = ((uint8)((uint8)comparemode << Delay_PWM_CTRL_CMPMODE2_SHIFT)) & 
                                                                 Delay_PWM_CTRL_CMPMODE2_MASK;
                              #else
                                      uint8 comparemode2masked = comparemode & Delay_PWM_CTRL_CMPMODE2_MASK;                
                              #endif /* (0 != Delay_PWM_CTRL_CMPMODE2_SHIFT) */
                              
                                      /*Clear existing mode */
                                      Delay_PWM_CONTROL &= ((uint8)(~(Delay_PWM_CTRL_CMPMODE1_MASK | Delay_PWM_CTRL_CMPMODE2_MASK))); 
                                      Delay_PWM_CONTROL |= (comparemode1masked | comparemode2masked);
                                      
                                  #else
                                      uint8 temp = comparemode;
                                  #endif /* (Delay_PWM_UsingFixedFunction) */
                              }
                      #endif /* Delay_PWM_CompareMode1SW */
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 6   

 299          
 300          #else /* UseOneCompareMode */
              
                      #if (Delay_PWM_CompareMode1SW)
              
              
                              /*******************************************************************************
                              * Function Name: Delay_PWM_SetCompareMode1
                              ********************************************************************************
                              * 
                              * Summary:
                              *  This function writes the Compare Mode for the pwm or pwm1 output
                              *
                              * Parameters:  
                              *  comparemode:  The new compare mode for the PWM output. Use the compare types
                              *                defined in the H file as input arguments.
                              *
                              * Return: 
                              *  None
                              *
                              *******************************************************************************/
                              void Delay_PWM_SetCompareMode1(uint8 comparemode) 
                              {
                                  #if(0 != Delay_PWM_CTRL_CMPMODE1_SHIFT)
                              uint8 comparemodemasked = ((uint8)((uint8)comparemode << Delay_PWM_CTRL_CMPMODE1_SHIFT)) &
             - 
                                                             Delay_PWM_CTRL_CMPMODE1_MASK;
                                  #else
                              uint8 comparemodemasked = comparemode & Delay_PWM_CTRL_CMPMODE1_MASK;                
                          #endif /* (0 != Delay_PWM_CTRL_CMPMODE1_SHIFT) */
                                 
                                  #if (Delay_PWM_UseControl)
                                      Delay_PWM_CONTROL &= ((uint8)(~Delay_PWM_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
                                      Delay_PWM_CONTROL |= comparemodemasked;
                                  #endif /* (Delay_PWM_UseControl) */
                              }
                      #endif /* Delay_PWM_CompareMode1SW */
              
              #if (Delay_PWM_CompareMode2SW)
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_SetCompareMode2
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This function writes the Compare Mode for the pwm or pwm2 output
                  *
                  * Parameters:  
                  *  comparemode:  The new compare mode for the PWM output. Use the compare types
                  *                defined in the H file as input arguments.
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/
                  void Delay_PWM_SetCompareMode2(uint8 comparemode) 
                  {
              
                      #if(0 != Delay_PWM_CTRL_CMPMODE2_SHIFT)
                          uint8 comparemodemasked = ((uint8)((uint8)comparemode << Delay_PWM_CTRL_CMPMODE2_SHIFT)) & 
                                                               Delay_PWM_CTRL_CMPMODE2_MASK;
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 7   

                      #else
                          uint8 comparemodemasked = comparemode & Delay_PWM_CTRL_CMPMODE2_MASK;            
                      #endif /* (0 != Delay_PWM_CTRL_CMPMODE2_SHIFT) */
                      
                      #if (Delay_PWM_UseControl)
                          Delay_PWM_CONTROL &= ((uint8)(~Delay_PWM_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
                          Delay_PWM_CONTROL |= comparemodemasked;
                      #endif /* (Delay_PWM_UseControl) */
                  }
                  #endif /*Delay_PWM_CompareMode2SW */
              
              #endif /* UseOneCompareMode */
 372          
 373          
 374          #if (!Delay_PWM_UsingFixedFunction)
 375          
 376          
 377              /*******************************************************************************
 378              * Function Name: Delay_PWM_WriteCounter
 379              ********************************************************************************
 380              * 
 381              * Summary:
 382              *  Writes a new counter value directly to the counter register. This will be 
 383              *  implemented for that currently running period and only that period. This API 
 384              *  is valid only for UDB implementation and not available for fixed function 
 385              *  PWM implementation.    
 386              *
 387              * Parameters:  
 388              *  counter:  The period new period counter value.
 389              *
 390              * Return: 
 391              *  None
 392              *
 393              * Side Effects: 
 394              *  The PWM Period will be reloaded when a counter value will be a zero
 395              *
 396              *******************************************************************************/
 397              void Delay_PWM_WriteCounter(uint8 counter) \
 398                                                 
 399              {
 400   1              CY_SET_REG8(Delay_PWM_COUNTER_LSB_PTR, counter);
 401   1          }
 402          
 403          
 404              /*******************************************************************************
 405              * Function Name: Delay_PWM_ReadCounter
 406              ********************************************************************************
 407              * 
 408              * Summary:
 409              *  This function returns the current value of the counter.  It doesn't matter
 410              *  if the counter is enabled or running.
 411              *
 412              * Parameters:  
 413              *  None  
 414              *
 415              * Return: 
 416              *  The current value of the counter.
 417              *
 418              *******************************************************************************/
 419              uint8 Delay_PWM_ReadCounter(void) 
 420              {
 421   1              /* Force capture by reading Accumulator */
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 8   

 422   1              /* Must first do a software capture to be able to read the counter */
 423   1              /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 424   1              (void)Delay_PWM_COUNTERCAP_LSB;
 425   1              
 426   1              /* Read the data from the FIFO (or capture register for Fixed Function)*/
 427   1              return (CY_GET_REG8(Delay_PWM_CAPTURE_LSB_PTR));
 428   1          }
 429          
 430                  #if (Delay_PWM_UseStatus)
 431          
 432          
 433                      /*******************************************************************************
 434                      * Function Name: Delay_PWM_ClearFIFO
 435                      ********************************************************************************
 436                      * 
 437                      * Summary:
 438                      *  This function clears all capture data from the capture FIFO
 439                      *
 440                      * Parameters:  
 441                      *  None
 442                      *
 443                      * Return: 
 444                      *  None
 445                      *
 446                      *******************************************************************************/
 447                      void Delay_PWM_ClearFIFO(void) 
 448                      {
 449   1                      while(0u != (Delay_PWM_ReadStatusRegister() & Delay_PWM_STATUS_FIFONEMPTY))
 450   1                      {
 451   2                          (void)Delay_PWM_ReadCapture();
 452   2                      }
 453   1                  }
 454          
 455                  #endif /* Delay_PWM_UseStatus */
 456          
 457          #endif /* !Delay_PWM_UsingFixedFunction */
 458          
 459          
 460          /*******************************************************************************
 461          * Function Name: Delay_PWM_WritePeriod
 462          ********************************************************************************
 463          * 
 464          * Summary:
 465          *  This function is used to change the period of the counter.  The new period 
 466          *  will be loaded the next time terminal count is detected.
 467          *
 468          * Parameters:  
 469          *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0 
 470          *           will result in the counter remaining at zero.
 471          *
 472          * Return: 
 473          *  None
 474          *
 475          *******************************************************************************/
 476          void Delay_PWM_WritePeriod(uint8 period) 
 477          {
 478   1          #if(Delay_PWM_UsingFixedFunction)
                      CY_SET_REG16(Delay_PWM_PERIOD_LSB_PTR, (uint16)period);
                  #else
 481   1              CY_SET_REG8(Delay_PWM_PERIOD_LSB_PTR, period);
 482   1          #endif /* (Delay_PWM_UsingFixedFunction) */
 483   1      }
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 9   

 484          
 485          #if (Delay_PWM_UseOneCompareMode)
 486          
 487          
 488              /*******************************************************************************
 489              * Function Name: Delay_PWM_WriteCompare
 490              ********************************************************************************
 491              * 
 492              * Summary:
 493              *  This funtion is used to change the compare1 value when the PWM is in Dither
 494              *  mode. The compare output will reflect the new value on the next UDB clock. 
 495              *  The compare output will be driven high when the present counter value is 
 496              *  compared to the compare value based on the compare mode defined in 
 497              *  Dither Mode.
 498              *
 499              * Parameters:  
 500              *  compare:  New compare value.  
 501              *
 502              * Return: 
 503              *  None
 504              *
 505              * Side Effects:
 506              *  This function is only available if the PWM mode parameter is set to
 507              *  Dither Mode, Center Aligned Mode or One Output Mode
 508              *
 509              *******************************************************************************/
 510              void Delay_PWM_WriteCompare(uint8 compare) \
 511                                                 
 512              {   
 513   1                      #if(Delay_PWM_UsingFixedFunction)
                                      CY_SET_REG16(Delay_PWM_COMPARE1_LSB_PTR, (uint16)compare);
                              #else
 516   1                      CY_SET_REG8(Delay_PWM_COMPARE1_LSB_PTR, compare);       
 517   1                      #endif /* (Delay_PWM_UsingFixedFunction) */
 518   1              
 519   1              #if (Delay_PWM_PWMMode == Delay_PWM__B_PWM__DITHER)
                          #if(Delay_PWM_UsingFixedFunction)
                                      CY_SET_REG16(Delay_PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
                              #else
                              CY_SET_REG8(Delay_PWM_COMPARE2_LSB_PTR, (compare + 1u));        
                              #endif /* (Delay_PWM_UsingFixedFunction) */
                      #endif /* (Delay_PWM_PWMMode == Delay_PWM__B_PWM__DITHER) */
 526   1          }
 527          
 528          
 529          #else
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_WriteCompare1
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This funtion is used to change the compare1 value.  The compare output will 
                  *  reflect the new value on the next UDB clock.  The compare output will be 
                  *  driven high when the present counter value is less than or less than or 
                  *  equal to the compare register, depending on the mode.
                  *
                  * Parameters:  
                  *  compare:  New compare value.  
                  *
                  * Return: 
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 10  

                  *  None
                  *
                  *******************************************************************************/
                  void Delay_PWM_WriteCompare1(uint8 compare) \
                                                      
                  {
                      #if(Delay_PWM_UsingFixedFunction)
                          CY_SET_REG16(Delay_PWM_COMPARE1_LSB_PTR, (uint16)compare);
                      #else
                          CY_SET_REG8(Delay_PWM_COMPARE1_LSB_PTR, compare);
                      #endif /* (Delay_PWM_UsingFixedFunction) */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_WriteCompare2
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This funtion is used to change the compare value, for compare1 output.  
                  *  The compare output will reflect the new value on the next UDB clock.  
                  *  The compare output will be driven high when the present counter value is 
                  *  less than or less than or equal to the compare register, depending on the 
                  *  mode.
                  *
                  * Parameters:  
                  *  compare:  New compare value.  
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/
                  void Delay_PWM_WriteCompare2(uint8 compare) \
                                                      
                  {
                      #if(Delay_PWM_UsingFixedFunction)
                          CY_SET_REG16(Delay_PWM_COMPARE2_LSB_PTR, compare);
                      #else
                          CY_SET_REG8(Delay_PWM_COMPARE2_LSB_PTR, compare);
                      #endif /* (Delay_PWM_UsingFixedFunction) */
                  }
              #endif /* UseOneCompareMode */
 588          
 589          #if (Delay_PWM_DeadBandUsed)
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_WriteDeadTime
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This function writes the dead-band counts to the corresponding register
                  *
                  * Parameters:  
                  *  deadtime:  Number of counts for dead time 
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/
                  void Delay_PWM_WriteDeadTime(uint8 deadtime) 
                  {
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 11  

                      /* If using the Dead Band 1-255 mode then just write the register */
                      #if(!Delay_PWM_DeadBand2_4)
                          CY_SET_REG8(Delay_PWM_DEADBAND_COUNT_PTR, deadtime);
                      #else
                          /* Otherwise the data has to be masked and offset */        
                          /* Clear existing data */
                          Delay_PWM_DEADBAND_COUNT &= ((uint8)(~Delay_PWM_DEADBAND_COUNT_MASK));
                          
                          /* Set new dead time */
                          #if(Delay_PWM_DEADBAND_COUNT_SHIFT)        
                              Delay_PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << Delay_PWM_DEADBAND_COUNT_SHIFT)) &
             - 
                                                                  Delay_PWM_DEADBAND_COUNT_MASK;
                          #else
                              Delay_PWM_DEADBAND_COUNT |= deadtime & Delay_PWM_DEADBAND_COUNT_MASK;        
                          #endif /* (Delay_PWM_DEADBAND_COUNT_SHIFT) */
                      
                      #endif /* (!Delay_PWM_DeadBand2_4) */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_ReadDeadTime
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This function reads the dead-band counts from the corresponding register
                  *
                  * Parameters:  
                  *  None
                  *
                  * Return: 
                  *  Dead Band Counts
                  *
                  *******************************************************************************/
                  uint8 Delay_PWM_ReadDeadTime(void) 
                  {
                      /* If using the Dead Band 1-255 mode then just read the register */
                      #if(!Delay_PWM_DeadBand2_4)
                          return (CY_GET_REG8(Delay_PWM_DEADBAND_COUNT_PTR));
                      #else
                      
                          /* Otherwise the data has to be masked and offset */
                          #if(Delay_PWM_DEADBAND_COUNT_SHIFT)      
                              return ((uint8)(((uint8)(Delay_PWM_DEADBAND_COUNT & Delay_PWM_DEADBAND_COUNT_MASK)) >> 
                                                                                         Delay_PWM_DEADBAND_COUNT_SHIFT)
             -);
                          #else
                              return (Delay_PWM_DEADBAND_COUNT & Delay_PWM_DEADBAND_COUNT_MASK);
                          #endif /* (Delay_PWM_DEADBAND_COUNT_SHIFT) */
                      #endif /* (!Delay_PWM_DeadBand2_4) */
                  }
              #endif /* DeadBandUsed */
 659          
 660          #if (Delay_PWM_UseStatus || Delay_PWM_UsingFixedFunction)
 661          
 662          
 663              /*******************************************************************************
 664              * Function Name: Delay_PWM_SetInterruptMode
 665              ********************************************************************************
 666              * 
 667              * Summary:
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 12  

 668              *  This function configures the interrupts mask control of theinterrupt 
 669              *  source status register.
 670              *
 671              * Parameters:  
 672              *  uint8 interruptMode: Bit field containing the interrupt sources enabled 
 673              *
 674              * Return: 
 675              *  None
 676              *
 677              *******************************************************************************/
 678              void Delay_PWM_SetInterruptMode(uint8 interruptMode)  
 679              {
 680   1              CY_SET_REG8(Delay_PWM_STATUS_MASK_PTR, interruptMode);
 681   1          }
 682          
 683          
 684              /*******************************************************************************
 685              * Function Name: Delay_PWM_ReadStatusRegister
 686              ********************************************************************************
 687              * 
 688              * Summary:
 689              *  This function returns the current state of the status register. 
 690              *
 691              * Parameters:  
 692              *  None
 693              *
 694              * Return: 
 695              *  uint8 : Current status register value. The status register bits are:
 696              *  [7:6] : Unused(0)
 697              *  [5]   : Kill event output
 698              *  [4]   : FIFO not empty
 699              *  [3]   : FIFO full
 700              *  [2]   : Terminal count
 701              *  [1]   : Compare output 2
 702              *  [0]   : Compare output 1
 703              *
 704              *******************************************************************************/
 705              uint8 Delay_PWM_ReadStatusRegister(void)   
 706              {
 707   1              uint8 result;
 708   1              
 709   1              result = CY_GET_REG8(Delay_PWM_STATUS_PTR);
 710   1              return (result);
 711   1          }
 712          
 713          #endif /* (Delay_PWM_UseStatus || Delay_PWM_UsingFixedFunction) */
 714          
 715          
 716          #if (Delay_PWM_UseControl)
 717          
 718          
 719              /*******************************************************************************
 720              * Function Name: Delay_PWM_ReadControlRegister
 721              ********************************************************************************
 722              * 
 723              * Summary:
 724              *  Returns the current state of the control register. This API is available 
 725              *  only if the control register is not removed.
 726              *
 727              * Parameters:  
 728              *  None 
 729              *
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 13  

 730              * Return: 
 731              *  uint8 : Current control register value
 732              *
 733              *******************************************************************************/    
 734              uint8 Delay_PWM_ReadControlRegister(void) 
 735              {
 736   1              uint8 result;
 737   1              
 738   1              result = CY_GET_REG8(Delay_PWM_CONTROL_PTR);
 739   1              return (result);
 740   1          }
 741          
 742          
 743              /*******************************************************************************
 744              * Function Name: Delay_PWM_WriteControlRegister
 745              ********************************************************************************
 746              * 
 747              * Summary:
 748              *  Sets the bit field of the control register. This API is available only if 
 749              *  the control register is not removed.
 750              *
 751              * Parameters:  
 752              *  uint8 control: Control register bit field, The status register bits are:
 753              *  [7]   : PWM Enable
 754              *  [6]   : Reset
 755              *  [5:3] : Compare Mode2
 756              *  [2:0] : Compare Mode2
 757              *
 758              * Return: 
 759              *  None
 760              *
 761              *******************************************************************************/  
 762              void Delay_PWM_WriteControlRegister(uint8 control) 
 763              {
 764   1              CY_SET_REG8(Delay_PWM_CONTROL_PTR, control);
 765   1          }
 766                  
 767          #endif /* (Delay_PWM_UseControl) */
 768          
 769          
 770          #if (!Delay_PWM_UsingFixedFunction)
 771          
 772          
 773              /*******************************************************************************
 774              * Function Name: Delay_PWM_ReadCapture
 775              ********************************************************************************
 776              * 
 777              * Summary:
 778              *  Reads the capture value from the capture FIFO.
 779              *
 780              * Parameters:  
 781              *  None
 782              *
 783              * Return: 
 784              *  uint8/uint16: The current capture value
 785              *
 786              *******************************************************************************/  
 787              uint8 Delay_PWM_ReadCapture(void)  
 788              {
 789   1              return (CY_GET_REG8(Delay_PWM_CAPTURE_LSB_PTR));
 790   1          }
 791                  
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 14  

 792          #endif /* (!Delay_PWM_UsingFixedFunction) */
 793          
 794          
 795          #if (Delay_PWM_UseOneCompareMode)
 796          
 797          
 798              /*******************************************************************************
 799              * Function Name: Delay_PWM_ReadCompare
 800              ********************************************************************************
 801              * 
 802              * Summary:
 803              *  Reads the compare value for the compare output when the PWM Mode parameter is 
 804              *  set to Dither mode, Center Aligned mode, or One Output mode.
 805              *
 806              * Parameters:  
 807              *  None
 808              *
 809              * Return: 
 810              *  uint8/uint16: Current compare value
 811              *
 812              *******************************************************************************/  
 813              uint8 Delay_PWM_ReadCompare(void)  
 814              {
 815   1                      #if(Delay_PWM_UsingFixedFunction)
                          return ((uint8)CY_GET_REG16(Delay_PWM_COMPARE1_LSB_PTR));
                      #else
 818   1                  return (CY_GET_REG8(Delay_PWM_COMPARE1_LSB_PTR));
 819   1              #endif /* (Delay_PWM_UsingFixedFunction) */
 820   1          }
 821          
 822          #else
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_ReadCompare1
                  ********************************************************************************
                  * 
                  * Summary:
                  *  Reads the compare value for the compare1 output.
                  *
                  * Parameters:  
                  *  None
                  *
                  * Return: 
                  *  uint8/uint16: Current compare value.
                  *
                  *******************************************************************************/  
                  uint8 Delay_PWM_ReadCompare1(void) 
                  {
                              return (CY_GET_REG8(Delay_PWM_COMPARE1_LSB_PTR));
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_ReadCompare2
                  ********************************************************************************
                  * 
                  * Summary:
                  *  Reads the compare value for the compare2 output.
                  *
                  * Parameters:  
                  *  None
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 15  

                  *
                  * Return: 
                  *  uint8/uint16: Current compare value.
                  *
                  *******************************************************************************/  
                  uint8 Delay_PWM_ReadCompare2(void)  
                  {
                              return (CY_GET_REG8(Delay_PWM_COMPARE2_LSB_PTR));
                  }
              
              #endif /* (Delay_PWM_UseOneCompareMode) */
 865          
 866          
 867          /*******************************************************************************
 868          * Function Name: Delay_PWM_ReadPeriod
 869          ********************************************************************************
 870          * 
 871          * Summary:
 872          *  Reads the period value used by the PWM hardware.
 873          *
 874          * Parameters:  
 875          *  None
 876          *
 877          * Return: 
 878          *  uint8/16: Period value
 879          *
 880          *******************************************************************************/ 
 881          uint8 Delay_PWM_ReadPeriod(void) 
 882          {
 883   1              #if(Delay_PWM_UsingFixedFunction)
                      return ((uint8)CY_GET_REG16(Delay_PWM_PERIOD_LSB_PTR));
                  #else
 886   1              return (CY_GET_REG8(Delay_PWM_PERIOD_LSB_PTR));
 887   1          #endif /* (Delay_PWM_UsingFixedFunction) */
 888   1      }
 889          
 890          #if ( Delay_PWM_KillModeMinTime)
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_WriteKillTime
                  ********************************************************************************
                  * 
                  * Summary:
                  *  Writes the kill time value used by the hardware when the Kill Mode 
                  *  is set to Minimum Time.
                  *
                  * Parameters:  
                  *  uint8: Minimum Time kill counts
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/ 
                  void Delay_PWM_WriteKillTime(uint8 killtime) 
                  {
                      CY_SET_REG8(Delay_PWM_KILLMODEMINTIME_PTR, killtime);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Delay_PWM_ReadKillTime
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 16  

                  ********************************************************************************
                  * 
                  * Summary:
                  *  Reads the kill time value used by the hardware when the Kill Mode is set 
                  *  to Minimum Time.
                  *
                  * Parameters:  
                  *  None
                  *
                  * Return: 
                  *  uint8: The current Minimum Time kill counts
                  *
                  *******************************************************************************/ 
                  uint8 Delay_PWM_ReadKillTime(void) 
                  {
                      return (CY_GET_REG8(Delay_PWM_KILLMODEMINTIME_PTR));
                  }
              
              #endif /* ( Delay_PWM_KillModeMinTime) */
 935          
 936          /* [] END OF FILE */
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 17  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Delay_PWM_Start (BEGIN)
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0000 900000      R     MOV     DPTR,#Delay_PWM_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0008 120000      R     LCALL   Delay_PWM_Init
                                           ; SOURCE LINE # 56
000B 900000      R     MOV     DPTR,#Delay_PWM_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0011         ?C0001:
                                           ; SOURCE LINE # 58
0011 120000      R     LCALL   Delay_PWM_Enable
                                           ; SOURCE LINE # 60
0014 22                RET     
             ; FUNCTION Delay_PWM_Start (END)

             ; FUNCTION Delay_PWM_Init (BEGIN)
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 112
0000 906474            MOV     DPTR,#06474H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54C0              ANL     A,#0C0H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#ctrl
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
000E 900000      R     MOV     DPTR,#ctrl
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 440B              ORL     A,#0BH
0016 FF                MOV     R7,A
0017 906474            MOV     DPTR,#06474H
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
001C 906494            MOV     DPTR,#06494H
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4401              ORL     A,#01H
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0027 7F31              MOV     R7,#031H
0029 120000      R     LCALL   _Delay_PWM_WriteCounter
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 18  

                                           ; SOURCE LINE # 130
002C 7F31              MOV     R7,#031H
002E 120000      R     LCALL   _Delay_PWM_WritePeriod
                                           ; SOURCE LINE # 133
0031 7F18              MOV     R7,#018H
0033 120000      R     LCALL   _Delay_PWM_WriteCompare
                                           ; SOURCE LINE # 148
0036 7F00              MOV     R7,#00H
0038 120000      R     LCALL   _Delay_PWM_SetInterruptMode
                                           ; SOURCE LINE # 161
003B 120000      E     LCALL   CyEnterCriticalSection
003E 900000      R     MOV     DPTR,#Delay_PWM_interruptState
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0043 906494            MOV     DPTR,#06494H
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 4410              ORL     A,#010H
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
004E 900000      R     MOV     DPTR,#Delay_PWM_interruptState
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 170
0056 120000      R     LCALL   Delay_PWM_ClearFIFO
                                           ; SOURCE LINE # 173
0059 22                RET     
             ; FUNCTION Delay_PWM_Init (END)

             ; FUNCTION Delay_PWM_Enable (BEGIN)
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 203
0000 906474            MOV     DPTR,#06474H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
000B 22                RET     
             ; FUNCTION Delay_PWM_Enable (END)

             ; FUNCTION Delay_PWM_Stop (BEGIN)
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 230
0000 906474            MOV     DPTR,#06474H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 19  

                                           ; SOURCE LINE # 238
000B 22                RET     
             ; FUNCTION Delay_PWM_Stop (END)

             ; FUNCTION _Delay_PWM_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 397
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
0005 900000      R     MOV     DPTR,#counter
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906404            MOV     DPTR,#06404H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
000F 22                RET     
             ; FUNCTION _Delay_PWM_WriteCounter (END)

             ; FUNCTION Delay_PWM_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 424
0000 906414            MOV     DPTR,#06414H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 427
0005 906454            MOV     DPTR,#06454H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 428
000A         ?C0007:
000A 22                RET     
             ; FUNCTION Delay_PWM_ReadCounter (END)

             ; FUNCTION Delay_PWM_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
0000         ?C0008:
                                           ; SOURCE LINE # 449
0000 120000      R     LCALL   Delay_PWM_ReadStatusRegister
0003 EF                MOV     A,R7
0004 30E405            JNB     ACC.4,?C0010
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
0007 120000      R     LCALL   Delay_PWM_ReadCapture
                                           ; SOURCE LINE # 452
000A 80F4              SJMP    ?C0008
                                           ; SOURCE LINE # 453
000C         ?C0010:
000C 22                RET     
             ; FUNCTION Delay_PWM_ClearFIFO (END)

             ; FUNCTION _Delay_PWM_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 476
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 481
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 20  

0005 900000      R     MOV     DPTR,#period
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906444            MOV     DPTR,#06444H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
000F 22                RET     
             ; FUNCTION _Delay_PWM_WritePeriod (END)

             ; FUNCTION _Delay_PWM_WriteCompare (BEGIN)
                                           ; SOURCE LINE # 510
0000 900000      R     MOV     DPTR,#compare
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 516
0005 900000      R     MOV     DPTR,#compare
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906424            MOV     DPTR,#06424H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
000F 22                RET     
             ; FUNCTION _Delay_PWM_WriteCompare (END)

             ; FUNCTION _Delay_PWM_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 678
0000 900000      R     MOV     DPTR,#interruptMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
0005 900000      R     MOV     DPTR,#interruptMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906484            MOV     DPTR,#06484H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
000F 22                RET     
             ; FUNCTION _Delay_PWM_SetInterruptMode (END)

             ; FUNCTION Delay_PWM_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 709
0000 906464            MOV     DPTR,#06464H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#result
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
000A 900000      R     MOV     DPTR,#result
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
                                           ; SOURCE LINE # 711
000F         ?C0014:
000F 22                RET     
             ; FUNCTION Delay_PWM_ReadStatusRegister (END)
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 21  


             ; FUNCTION Delay_PWM_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 738
0000 906474            MOV     DPTR,#06474H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#result
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 739
000A 900000      R     MOV     DPTR,#result
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
                                           ; SOURCE LINE # 740
000F         ?C0015:
000F 22                RET     
             ; FUNCTION Delay_PWM_ReadControlRegister (END)

             ; FUNCTION _Delay_PWM_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 762
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906474            MOV     DPTR,#06474H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
000F 22                RET     
             ; FUNCTION _Delay_PWM_WriteControlRegister (END)

             ; FUNCTION Delay_PWM_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
0000 906454            MOV     DPTR,#06454H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 790
0005         ?C0017:
0005 22                RET     
             ; FUNCTION Delay_PWM_ReadCapture (END)

             ; FUNCTION Delay_PWM_ReadCompare (BEGIN)
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 818
0000 906424            MOV     DPTR,#06424H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 820
0005         ?C0018:
0005 22                RET     
             ; FUNCTION Delay_PWM_ReadCompare (END)

             ; FUNCTION Delay_PWM_ReadPeriod (BEGIN)
C51 COMPILER V9.51   DELAY_PWM                                                             12/03/2013 18:19:23 PAGE 22  

                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 886
0000 906444            MOV     DPTR,#06444H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 888
0005         ?C0019:
0005 22                RET     
             ; FUNCTION Delay_PWM_ReadPeriod (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    289    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
