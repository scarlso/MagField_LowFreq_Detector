C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.lst) CD DB
                    - NOIP OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 3.0 Component Pack 7
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  #define DMAINITSEC
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  53          /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 2   

  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          /* IDMUX Address: CYREG_IDMUX_DRQ_CTL0 Size (bytes): 6 */
  91          #define BS_IDMUX_VAL ((const uint8 CYFAR *)0x00080000u)
  92          
  93          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
  94          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)0x00080008u)
  95          
  96          /* IOPORT_3 Address: CYDEV_PRTDSI_PRT3_BASE Size (bytes): 7 */
  97          #define BS_IOPORT_3_VAL ((const uint8 CYFAR *)0x00080010u)
  98          
  99          /* IOPORT_4 Address: CYDEV_PRTDSI_PRT4_BASE Size (bytes): 7 */
 100          #define BS_IOPORT_4_VAL ((const uint8 CYFAR *)0x00080018u)
 101          
 102          /* IOPORT_6 Address: CYDEV_PRTDSI_PRT6_BASE Size (bytes): 7 */
 103          #define BS_IOPORT_6_VAL ((const uint8 CYFAR *)0x00080020u)
 104          
 105          /* UDB_1_5_0_CONFIG Address: CYDEV_UCFG_B0_P0_U0_BASE Size (bytes): 128 */
 106          #define BS_UDB_1_5_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080028u)
 107          
 108          /* UDB_1_5_1_CONFIG Address: CYDEV_UCFG_B0_P0_U1_BASE Size (bytes): 128 */
 109          #define BS_UDB_1_5_1_CONFIG_VAL ((const uint8 CYFAR *)0x000800A8u)
 110          
 111          /* UDB_1_4_1_CONFIG Address: CYDEV_UCFG_B0_P1_U0_BASE Size (bytes): 128 */
 112          #define BS_UDB_1_4_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080128u)
 113          
 114          /* UDB_1_4_0_CONFIG Address: CYDEV_UCFG_B0_P1_U1_BASE Size (bytes): 128 */
 115          #define BS_UDB_1_4_0_CONFIG_VAL ((const uint8 CYFAR *)0x000801A8u)
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 3   

 116          
 117          /* UDB_1_3_0_CONFIG Address: CYDEV_UCFG_B0_P2_U0_BASE Size (bytes): 128 */
 118          #define BS_UDB_1_3_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080228u)
 119          
 120          /* UDB_1_3_1_CONFIG Address: CYDEV_UCFG_B0_P2_U1_BASE Size (bytes): 128 */
 121          #define BS_UDB_1_3_1_CONFIG_VAL ((const uint8 CYFAR *)0x000802A8u)
 122          
 123          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070u Size (bytes): 32 */
 124          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x00080328u)
 125          
 126          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 127          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)0x00080348u)
 128          
 129          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080u Size (bytes): 128 */
 130          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080358u)
 131          
 132          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080u Size (bytes): 128 */
 133          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000803D8u)
 134          
 135          /* DSI0_2_HV_ROUTING Address: CYDEV_UCFG_DSI7_BASE + 0x00000080u Size (bytes): 128 */
 136          #define BS_DSI0_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080458u)
 137          
 138          /* DSISWITCH_0_3 Address: CYDEV_UCFG_DSI6_BASE Size (bytes): 128 */
 139          #define BS_DSISWITCH_0_3_VAL ((const uint8 CYFAR *)0x000804D8u)
 140          
 141          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080u Size (bytes): 128 */
 142          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080558u)
 143          
 144          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080u Size (bytes): 128 */
 145          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000805D8u)
 146          
 147          /* DSISWITCH_0_5 Address: CYDEV_UCFG_DSI4_BASE Size (bytes): 128 */
 148          #define BS_DSISWITCH_0_5_VAL ((const uint8 CYFAR *)0x00080658u)
 149          
 150          /* DSI0_5_HV_ROUTING Address: CYDEV_UCFG_DSI4_BASE + 0x00000080u Size (bytes): 128 */
 151          #define BS_DSI0_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000806D8u)
 152          
 153          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 154          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080758u)
 155          
 156          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 157          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000807D8u)
 158          
 159          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 160          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080858u)
 161          
 162          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 163          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000808D8u)
 164          
 165          /* UDBSWITCH_1_3 Address: CYDEV_UCFG_B0_P2_ROUTE_BASE Size (bytes): 128 */
 166          #define BS_UDBSWITCH_1_3_VAL ((const uint8 CYFAR *)0x00080958u)
 167          
 168          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 169          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000809D8u)
 170          
 171          /* UDB_1_4_HV_ROUTING Address: CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 172          #define BS_UDB_1_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080A58u)
 173          
 174          /* UDBSWITCH_1_4 Address: CYDEV_UCFG_B0_P1_ROUTE_BASE Size (bytes): 128 */
 175          #define BS_UDBSWITCH_1_4_VAL ((const uint8 CYFAR *)0x00080AD8u)
 176          
 177          /* UDB_2_4_HV_ROUTING Address: CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 4   

 178          #define BS_UDB_2_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080B58u)
 179          
 180          /* UDBSWITCH_1_5 Address: CYDEV_UCFG_B0_P0_ROUTE_BASE Size (bytes): 128 */
 181          #define BS_UDBSWITCH_1_5_VAL ((const uint8 CYFAR *)0x00080BD8u)
 182          
 183          /* UDB_2_5_HV_ROUTING Address: CYDEV_UCFG_B0_P0_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 184          #define BS_UDB_2_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080C58u)
 185          
 186          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 187          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x00080CD8u)
 188          
 189          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080u Size (bytes): 128 */
 190          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080D58u)
 191          
 192          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 193          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)0x00080DD8u)
 194          
 195          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080u Size (bytes): 128 */
 196          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080E58u)
 197          
 198          /* DSISWITCH_1_2 Address: CYDEV_UCFG_DSI3_BASE Size (bytes): 128 */
 199          #define BS_DSISWITCH_1_2_VAL ((const uint8 CYFAR *)0x00080ED8u)
 200          
 201          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080u Size (bytes): 128 */
 202          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080F58u)
 203          
 204          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080u Size (bytes): 128 */
 205          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080FD8u)
 206          
 207          /* DSISWITCH_1_4 Address: CYDEV_UCFG_DSI1_BASE Size (bytes): 128 */
 208          #define BS_DSISWITCH_1_4_VAL ((const uint8 CYFAR *)0x00081058u)
 209          
 210          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080u Size (bytes): 128 */
 211          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000810D8u)
 212          
 213          /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 214          #define BS_DSISWITCH_1_5_VAL ((const uint8 CYFAR *)0x00081158u)
 215          
 216          /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080u Size (bytes): 128 */
 217          #define BS_DSI3_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000811D8u)
 218          
 219          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 220          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00081258u)
 221          
 222          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 223          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00081260u)
 224          
 225          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
 226          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x00081268u)
 227          
 228          /* IOPINS0_4 Address: CYREG_PRT4_DM0 Size (bytes): 8 */
 229          #define BS_IOPINS0_4_VAL ((const uint8 CYFAR *)0x00081270u)
 230          
 231          /* IOPINS0_6 Address: CYREG_PRT6_DR Size (bytes): 10 */
 232          #define BS_IOPINS0_6_VAL ((const uint8 CYFAR *)0x00081278u)
 233          
 234          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 235          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)0x00081284u)
 236          
 237          /* PHUB_CFGMEM10 Address: CYREG_PHUB_CFGMEM10_CFG0 Size (bytes): 4 */
 238          #define BS_PHUB_CFGMEM10_VAL ((const uint8 CYFAR *)0x00081288u)
 239          
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 5   

 240          
 241          /*******************************************************************************
 242          * Function Name: cfg_dma_init
 243          ********************************************************************************
 244          * Summary:
 245          *  This function is used to copy device configuration data from constant values
 246          *  stored in memory into the proper chip configuration registers using DMA.  It
 247          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 248          *
 249          * Parameters:  
 250          *   void
 251          *
 252          * Return:
 253          *   void
 254          *
 255          *******************************************************************************/
 256          static void cfg_dma_init(void);
 257          static void cfg_dma_init(void)
 258          {
 259   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 260   1              CYPACKED struct td_t {
 261   1                      uint16 size;
 262   1                      uint8 flags;
 263   1                      uint8 next_td_ptr;
 264   1                      uint16 src;
 265   1                      uint16 dest;
 266   1              } CYPACKED_ATTR;
 267   1      
 268   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 269   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 270   1      
 271   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 272   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 273   1      
 274   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 275   1              DMAINITSEC static const uint8 CYCODE CH5_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 276   1      
 277   1              /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 278   1              DMAINITSEC static const uint8 CYCODE CH6_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x01u
             -, 0x00u };
 279   1      
 280   1              /* Initialization data for each DMA channel's TD registers */
 281   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 282   1      
 283   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 284   1      
 285   1              /* This table holds all of the initialization data necessary for the DMA
 286   1                 process to transfer data from the source location to the destination. */
 287   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 288   1                      /* Size, Flags, Next, Source, Destination */
 289   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 290   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 291   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 3 */
 292   1                      { 8u, 0x23u, 0x05u, (uint16)(uint32)(CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },      /* TD 4 */
 293   1                      { 5u, 0x23u, 0x06u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 5 */
 294   1                      { 5u, 0x23u, 0x07u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 6 */
 295   1                      { 5u, 0x23u, 0x08u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 7 */
 296   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },   /* TD 8 */
 297   1                      { 16u, 0x22u, 0x0Au, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT1_DR) },        /* TD 9 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 6   

 298   1                      { 16u, 0x22u, 0x0Bu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT5_DR) },        /* TD 10 */
 299   1                      { 16u, 0x22u, 0x0Cu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT12_DR) },       /* TD 11 */
 300   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },       /* TD 12 */
 301   1                      { 384u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },    /* TD 13 */
 302   1                      { 1408u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },   /* TD 14 *
             -/
 303   1                      { 512u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P7_U0_BASE) },    /* TD 15 */
 304   1                      { 384u, 0x22u, 0x11u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },    /* TD 16 */
 305   1                      { 384u, 0x22u, 0x12u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },    /* TD 17 */
 306   1                      { 896u, 0x22u, 0x13u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },    /* TD 18 */
 307   1                      { 128u, 0x22u, 0x14u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) },        /* TD 19 */
 308   1                      { 128u, 0x22u, 0x15u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) },        /* TD 20 */
 309   1                      { 128u, 0x22u, 0x16u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },        /* TD 21 */
 310   1                      { 128u, 0x22u, 0x17u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },       /* TD 22 */
 311   1                      { 128u, 0x22u, 0x18u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },       /* TD 23 */
 312   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) }, /* TD 24 */
 313   1                      { 7u, 0x23u, 0x1Au, (uint16)(uint32)(BS_IOPORT_0_VAL), (uint16)(CYDEV_PRTDSI_PRT0_BASE) },      /* TD 25 */
 314   1                      { 7u, 0x23u, 0x1Bu, (uint16)(uint32)(BS_IOPORT_3_VAL), (uint16)(CYDEV_PRTDSI_PRT3_BASE) },      /* TD 26 */
 315   1                      { 7u, 0x23u, 0x1Cu, (uint16)(uint32)(BS_IOPORT_4_VAL), (uint16)(CYDEV_PRTDSI_PRT4_BASE) },      /* TD 27 */
 316   1                      { 7u, 0x23u, 0x1Du, (uint16)(uint32)(BS_IOPORT_6_VAL), (uint16)(CYDEV_PRTDSI_PRT6_BASE) },      /* TD 28 */
 317   1                      { 32u, 0x23u, 0xFEu, (uint16)(uint32)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BAS
             -E + 0x00000070u) },   /* TD 29 */
 318   1                      { 128u, 0x23u, 0x1Fu, (uint16)(uint32)(BS_UDB_1_5_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },  /
             -* TD 30 */
 319   1                      { 128u, 0x23u, 0x20u, (uint16)(uint32)(BS_UDB_1_5_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P0_U1_BASE) },  /
             -* TD 31 */
 320   1                      { 128u, 0x23u, 0x21u, (uint16)(uint32)(BS_UDB_1_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U0_BASE) },  /
             -* TD 32 */
 321   1                      { 128u, 0x23u, 0x22u, (uint16)(uint32)(BS_UDB_1_4_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U1_BASE) },  /
             -* TD 33 */
 322   1                      { 128u, 0x23u, 0x23u, (uint16)(uint32)(BS_UDB_1_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },  /
             -* TD 34 */
 323   1                      { 128u, 0x23u, 0x24u, (uint16)(uint32)(BS_UDB_1_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U1_BASE) },  /
             -* TD 35 */
 324   1                      { 16u, 0x23u, 0x25u, (uint16)(uint32)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },     /* TD 36 */
 325   1                      { 128u, 0x23u, 0x26u, (uint16)(uint32)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x000
             -00080u) },        /* TD 37 */
 326   1                      { 128u, 0x23u, 0x27u, (uint16)(uint32)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x000
             -00080u) },        /* TD 38 */
 327   1                      { 128u, 0x23u, 0x28u, (uint16)(uint32)(BS_DSI0_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE + 0x0000
             -0080u) },        /* TD 39 */
 328   1                      { 128u, 0x23u, 0x29u, (uint16)(uint32)(BS_DSISWITCH_0_3_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) }, /* TD 40
             - */
 329   1                      { 128u, 0x23u, 0x2Au, (uint16)(uint32)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x0000
             -0080u) },        /* TD 41 */
 330   1                      { 128u, 0x23u, 0x2Bu, (uint16)(uint32)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x0000
             -0080u) },        /* TD 42 */
 331   1                      { 128u, 0x23u, 0x2Cu, (uint16)(uint32)(BS_DSISWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) }, /* TD 43
             - */
 332   1                      { 128u, 0x23u, 0x2Du, (uint16)(uint32)(BS_DSI0_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE + 0x0000
             -0080u) },        /* TD 44 */
 333   1                      { 128u, 0x23u, 0x2Eu, (uint16)(uint32)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 45 */
 334   1                      { 128u, 0x23u, 0x2Fu, (uint16)(uint32)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 46 */
 335   1                      { 128u, 0x23u, 0x30u, (uint16)(uint32)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 47 */
 336   1                      { 128u, 0x23u, 0x31u, (uint16)(uint32)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 48 */
 337   1                      { 128u, 0x23u, 0x32u, (uint16)(uint32)(BS_UDBSWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE) },  /
             -* TD 49 */
 338   1                      { 128u, 0x23u, 0x33u, (uint16)(uint32)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE 
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 7   

             -+ 0x00000080u) },     /* TD 50 */
 339   1                      { 128u, 0x23u, 0x34u, (uint16)(uint32)(BS_UDB_1_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 51 */
 340   1                      { 128u, 0x23u, 0x35u, (uint16)(uint32)(BS_UDBSWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE) },  /
             -* TD 52 */
 341   1                      { 128u, 0x23u, 0x36u, (uint16)(uint32)(BS_UDB_2_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 53 */
 342   1                      { 128u, 0x23u, 0x37u, (uint16)(uint32)(BS_UDBSWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE) },  /
             -* TD 54 */
 343   1                      { 128u, 0x23u, 0x38u, (uint16)(uint32)(BS_UDB_2_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P0_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 55 */
 344   1                      { 128u, 0x23u, 0x39u, (uint16)(uint32)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) }, /* TD 56
             - */
 345   1                      { 128u, 0x23u, 0x3Au, (uint16)(uint32)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x0000
             -0080u) },        /* TD 57 */
 346   1                      { 128u, 0x23u, 0x3Bu, (uint16)(uint32)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) }, /* TD 58
             - */
 347   1                      { 128u, 0x23u, 0x3Cu, (uint16)(uint32)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x0000
             -0080u) },        /* TD 59 */
 348   1                      { 128u, 0x23u, 0x3Du, (uint16)(uint32)(BS_DSISWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) }, /* TD 60
             - */
 349   1                      { 128u, 0x23u, 0x3Eu, (uint16)(uint32)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x0000
             -0080u) },        /* TD 61 */
 350   1                      { 128u, 0x23u, 0x3Fu, (uint16)(uint32)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x0000
             -0080u) },        /* TD 62 */
 351   1                      { 128u, 0x23u, 0x40u, (uint16)(uint32)(BS_DSISWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) }, /* TD 63
             - */
 352   1                      { 128u, 0x23u, 0x41u, (uint16)(uint32)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x0000
             -0080u) },        /* TD 64 */
 353   1                      { 128u, 0x23u, 0x42u, (uint16)(uint32)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) }, /* TD 65
             - */
 354   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x0000
             -0080u) },        /* TD 66 */
 355   1              };
 356   1      
 357   1              DMA_ZERO_VAL = 0u;
 358   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 359   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 360   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 361   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 66u*8u);       /* transfer size */
 362   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 363   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 364   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 365   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 366   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 367   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 368   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x09u);   /* ch1 first TD: 9 */
 369   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Du);   /* ch2 first TD: 13 */
 370   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x19u);   /* ch5 first TD: 25 */
 371   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH6_BASIC_STATUS+1u), 0x1Eu);   /* ch6 first TD: 30 */
 372   1      
 373   1              CY_CFG_MEMORY_BARRIER();
 374   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 375   1              CY_CFG_MEMORY_BARRIER();
 376   1      
 377   1              /* Wait for all DMA transfers to complete */
 378   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 379   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 8   

 380   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 381   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 382   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 383   1      
 384   1      
 385   1              CYCONFIGCPY((void CYFAR *)(CYREG_IDMUX_DRQ_CTL0), (const void CYFAR *)(BS_IDMUX_VAL), 6u);
 386   1      
 387   1      }
 388          /*******************************************************************************
 389          * Function Name: ClockSetup
 390          ********************************************************************************
 391          *
 392          * Summary:
 393          *  Performs the initialization of all of the clocks in the device based on the
 394          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 395          *  clocks and setting the necessary dividers to produce the desired frequency. 
 396          *
 397          * Parameters:
 398          *  void
 399          *
 400          * Return:
 401          *  void
 402          *
 403          *******************************************************************************/
 404          static void ClockSetup(void);
 405          static void ClockSetup(void)
 406          {
 407   1              uint32 timeout;
 408   1              uint8 pllLock;
 409   1      
 410   1      
 411   1              /* Configure Digital Clocks based on settings from Clock DWR */
 412   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0000u);
 413   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x50u);
 414   1      
 415   1              /* Configure Analog Clocks based on settings from Clock DWR */
 416   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 417   1      
 418   1              /* Configure ILO based on settings from Clock DWR */
 419   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 420   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 421   1      
 422   1              /* Configure IMO based on settings from Clock DWR */
 423   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 424   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 425   1      
 426   1              /* Configure PLL based on settings from Clock DWR */
 427   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0221u);
 428   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 429   1              /* Wait up to 250us for the PLL to lock */
 430   1              pllLock = 0u;
 431   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 432   1              { 
 433   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 434   2                      CyDelayCycles(10u * 12u); /* Delay 10us based on 12MHz clock */
 435   2              }
 436   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 437   1              if (timeout == 0u)
 438   1              {
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 9   

 439   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 440   2              }
 441   1      
 442   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 443   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 444   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 445   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 446   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 447   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 448   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 449   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 450   1      
 451   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 452   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 453   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 454   1      }
 455          
 456          
 457          /* Analog API Functions */
 458          
 459          
 460          /*******************************************************************************
 461          * Function Name: AnalogSetDefault
 462          ********************************************************************************
 463          *
 464          * Summary:
 465          *  Sets up the analog portions of the chip to default values based on chip
 466          *  configuration options from the project.
 467          *
 468          * Parameters:
 469          *  void
 470          *
 471          * Return:
 472          *  void
 473          *
 474          *******************************************************************************/
 475          static void AnalogSetDefault(void);
 476          static void AnalogSetDefault(void)
 477          {
 478   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 479   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 480   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 481   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0xFFu);
 482   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT4_AG, 0xFFu);
 483   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0xF0u);
 484   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 485   1      }
 486          
 487          
 488          /*******************************************************************************
 489          * Function Name: SetAnalogRoutingPumps
 490          ********************************************************************************
 491          *
 492          * Summary:
 493          * Enables or disables the analog pumps feeding analog routing switches.
 494          * Intended to be called at startup, based on the Vdda system configuration;
 495          * may be called during operation when the user informs us that the Vdda voltage
 496          * crossed the pump threshold.
 497          *
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 10  

 498          * Parameters:
 499          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 500          *
 501          * Return:
 502          *  void
 503          *
 504          *******************************************************************************/
 505          void SetAnalogRoutingPumps(uint8 enabled)
 506          {
 507   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 508   1              if (enabled != 0u)
 509   1              {
 510   2                      regValue |= 0x22u;
 511   2              }
 512   1              else
 513   1              {
 514   2                      regValue &= (uint8)~0x22u;
 515   2              }
 516   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 517   1      }
 518          
 519          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 520          /* This is an implementation detail of the AMux. Code that depends on it may be
 521             incompatible with other versions of PSoC Creator. */
 522          uint8 CYXDATA * const CYCODE ADC_AMux__addrTable[2] = {
 523                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 524                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 525          };
 526          
 527          /* This is an implementation detail of the AMux. Code that depends on it may be
 528             incompatible with other versions of PSoC Creator. */
 529          const uint8 CYCODE ADC_AMux__maskTable[2] = {
 530                  0x40u, 
 531                  0x20u, 
 532          };
 533          
 534          /*******************************************************************************
 535          * Function Name: ADC_AMux_Set
 536          ********************************************************************************
 537          * Summary:
 538          *  This function is used to set a particular channel as active on the AMux.
 539          *
 540          * Parameters:  
 541          *   channel - The mux channel input to set as active
 542          *
 543          * Return:
 544          *   void
 545          *
 546          *******************************************************************************/
 547          void ADC_AMux_Set(uint8 channel)
 548          {
 549   1              if (channel < 2)
 550   1              {
 551   2                      *ADC_AMux__addrTable[channel] |= ADC_AMux__maskTable[channel];
 552   2              }
 553   1      }
 554          
 555          /*******************************************************************************
 556          * Function Name: ADC_AMux_Unset
 557          ********************************************************************************
 558          * Summary:
 559          *  This function is used to clear a particular channel from being active on the
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 11  

 560          *  AMux.
 561          *
 562          * Parameters:  
 563          *   channel - The mux channel input to mark inactive
 564          *
 565          * Return:
 566          *   void
 567          *
 568          *******************************************************************************/
 569          void ADC_AMux_Unset(uint8 channel)
 570          {
 571   1              if (channel < 2)
 572   1              {
 573   2                      *ADC_AMux__addrTable[channel] &= (uint8)~ADC_AMux__maskTable[channel];
 574   2              }
 575   1      }
 576          
 577          
 578          
 579          /*******************************************************************************
 580          * Function Name: cyfitter_cfg
 581          ********************************************************************************
 582          * Summary:
 583          *  This function is called by the start-up code for the selected device. It
 584          *  performs all of the necessary device configuration based on the design
 585          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 586          *  as Clocks and Pins as well as any component configuration that is necessary.
 587          *
 588          * Parameters:  
 589          *   void
 590          *
 591          * Return:
 592          *   void
 593          *
 594          *******************************************************************************/
 595          
 596          void cyfitter_cfg(void)
 597          {
 598   1      
 599   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 600   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 601   1              /* Setup clocks based on selections from Clock DWR */
 602   1              ClockSetup();
 603   1              /* Set Flash Cycles based on newly configured 33.00MHz Bus Clock. */
 604   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 605   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 606   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 607   1      
 608   1              {
 609   2                      cfg_dma_init();
 610   2      
 611   2                      /* Perform normal device configuration. Order is not critical for these items. */
 612   2                      CY_SET_REG8((void CYXDATA *)(CYREG_DSM0_CR3), 0x0Au);
 613   2                      CYMEMZERO((void CYFAR *)(CYREG_PHUB_CFGMEM0_CFG0), 4u);
 614   2                      CYCONFIGCPY((void CYFAR *)(CYREG_PHUB_CFGMEM10_CFG0), (const void CYFAR *)(BS_PHUB_CFGMEM10_VAL), 4u);
 615   2      
 616   2                      /* Enable digital routing */
 617   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 618   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 12  

 619   2      
 620   2                      /* Enable UDB array */
 621   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 622   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 623   2              }
 624   1      
 625   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 626   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 627   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 628   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (const void CYFAR *)(BS_IOPINS0_3_VAL), 8u);
 629   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT4_DM0), (const void CYFAR *)(BS_IOPINS0_4_VAL), 8u);
 630   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT6_DR), (const void CYFAR *)(BS_IOPINS0_6_VAL), 10u);
 631   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 632   1      
 633   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 634   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 635   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 636   1              {
 637   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 638   2              }
 639   1      
 640   1      
 641   1              /* Perform basic analog initialization to defaults */
 642   1              AnalogSetDefault();
 643   1      
 644   1              /* Configure alternate active mode */
 645   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 646   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 647   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 71
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 86
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 357
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 358
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
001F 7B02              MOV     R3,#02H
0021 7A78              MOV     R2,#078H
0023 7900              MOV     R1,#00H
0025 7D10              MOV     R5,#010H
0027 7C02              MOV     R4,#02H
0029 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 362
002C 907802            MOV     DPTR,#07802H
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0032 907803            MOV     DPTR,#07803H
0035 74A3              MOV     A,#0A3H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 14  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AF01              MOV     R7,AR1
004C AE02              MOV     R6,AR2
004E AD03              MOV     R5,AR3
0050 7C00              MOV     R4,#00H
0052 EF                MOV     A,R7
0053 54FF              ANL     A,#0FFH
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 54FF              ANL     A,#0FFH
0059 FE                MOV     R6,A
005A ED                MOV     A,R5
005B 5400              ANL     A,#00H
005D FD                MOV     R5,A
005E EC                MOV     A,R4
005F 5400              ANL     A,#00H
0061 FC                MOV     R4,A
0062 AD07              MOV     R5,AR7
0064 AC06              MOV     R4,AR6
0066 D001              POP     AR1
0068 D002              POP     AR2
006A D003              POP     AR3
006C 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 365
006F 7B02              MOV     R3,#02H
0071 7A78              MOV     R2,#078H
0073 7906              MOV     R1,#06H
0075 7D08              MOV     R5,#08H
0077 7C78              MOV     R4,#078H
0079 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 366
007C 7B02              MOV     R3,#02H
007E 7A76              MOV     R2,#076H
0080 7904              MOV     R1,#04H
0082 7D10              MOV     R5,#010H
0084 7C00              MOV     R4,#00H
0086 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 367
0089 7B02              MOV     R3,#02H
008B 7A76              MOV     R2,#076H
008D 7906              MOV     R1,#06H
008F 7D00              MOV     R5,#00H
0091 7C00              MOV     R4,#00H
0093 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 368
0096 907029            MOV     DPTR,#07029H
0099 7409              MOV     A,#09H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
009C 907039            MOV     DPTR,#07039H
009F 740D              MOV     A,#0DH
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
00A2 907069            MOV     DPTR,#07069H
00A5 7419              MOV     A,#019H
00A7 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 15  

                                           ; SOURCE LINE # 371
00A8 907079            MOV     DPTR,#07079H
00AB 741E              MOV     A,#01EH
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
00AE 907014            MOV     DPTR,#07014H
00B1 7401              MOV     A,#01H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
00B4         ?C0010:
                                           ; SOURCE LINE # 378
00B4 907018            MOV     DPTR,#07018H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 5401              ANL     A,#01H
00BC FF                MOV     R7,A
00BD 7E00              MOV     R6,#00H
00BF EF                MOV     A,R7
00C0 4E                ORL     A,R6
00C1 70F1              JNZ     ?C0010
00C3         ?C0011:
00C3         ?C0012:
                                           ; SOURCE LINE # 379
00C3 907028            MOV     DPTR,#07028H
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 EF                MOV     A,R7
00C9 5401              ANL     A,#01H
00CB FF                MOV     R7,A
00CC 7E00              MOV     R6,#00H
00CE EF                MOV     A,R7
00CF 4E                ORL     A,R6
00D0 70F1              JNZ     ?C0012
00D2         ?C0013:
00D2         ?C0014:
                                           ; SOURCE LINE # 380
00D2 907038            MOV     DPTR,#07038H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 5401              ANL     A,#01H
00DA FF                MOV     R7,A
00DB 7E00              MOV     R6,#00H
00DD EF                MOV     A,R7
00DE 4E                ORL     A,R6
00DF 70F1              JNZ     ?C0014
00E1         ?C0015:
00E1         ?C0016:
                                           ; SOURCE LINE # 381
00E1 907068            MOV     DPTR,#07068H
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 EF                MOV     A,R7
00E7 5401              ANL     A,#01H
00E9 FF                MOV     R7,A
00EA 7E00              MOV     R6,#00H
00EC EF                MOV     A,R7
00ED 4E                ORL     A,R6
00EE 70F1              JNZ     ?C0016
00F0         ?C0017:
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 16  

00F0         ?C0018:
                                           ; SOURCE LINE # 382
00F0 907078            MOV     DPTR,#07078H
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 EF                MOV     A,R7
00F6 5401              ANL     A,#01H
00F8 FF                MOV     R7,A
00F9 7E00              MOV     R6,#00H
00FB EF                MOV     A,R7
00FC 4E                ORL     A,R6
00FD 70F1              JNZ     ?C0018
00FF         ?C0019:
                                           ; SOURCE LINE # 385
00FF 7B08              MOV     R3,#08H
0101 7A00              MOV     R2,#00H
0103 7900              MOV     R1,#00H
0105 C003              PUSH    AR3
0107 C002              PUSH    AR2
0109 C001              PUSH    AR1
010B 7B01              MOV     R3,#01H
010D 7A51              MOV     R2,#051H
010F 7910              MOV     R1,#010H
0111 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0114 120000      E     LCALL   ?C?PSTXDATA
0117 D001              POP     AR1
0119 D002              POP     AR2
011B D003              POP     AR3
011D 7F06              MOV     R7,#06H
011F 7E00              MOV     R6,#00H
0121 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 387
0124 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 412
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 413
000D 904082            MOV     DPTR,#04082H
0010 7450              MOV     A,#050H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0013 7B08              MOV     R3,#08H
0015 7A12              MOV     R2,#012H
0017 7984              MOV     R1,#084H
0019 C003              PUSH    AR3
001B C002              PUSH    AR2
001D C001              PUSH    AR1
001F 7B00              MOV     R3,#00H
0021 7A41              MOV     R2,#041H
0023 7900              MOV     R1,#00H
0025 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0028 120000      E     LCALL   ?C?PSTXDATA
002B D001              POP     AR1
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 17  

002D D002              POP     AR2
002F D003              POP     AR3
0031 7F04              MOV     R7,#04H
0033 7E00              MOV     R6,#00H
0035 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 419
0038 904300            MOV     DPTR,#04300H
003B 7402              MOV     A,#02H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
003E 904000            MOV     DPTR,#04000H
0041 7408              MOV     A,#08H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0044 904200            MOV     DPTR,#04200H
0047 7403              MOV     A,#03H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
004A 7B0C              MOV     R3,#0CH
004C 7A01              MOV     R2,#01H
004E 7908              MOV     R1,#08H
0050 120000      E     LCALL   _cyread8
0053 9046A1            MOV     DPTR,#046A1H
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0058 7B00              MOV     R3,#00H
005A 7A42              MOV     R2,#042H
005C 7922              MOV     R1,#022H
005E 7D21              MOV     R5,#021H
0060 7C02              MOV     R4,#02H
0062 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 428
0065 7B00              MOV     R3,#00H
0067 7A42              MOV     R2,#042H
0069 7920              MOV     R1,#020H
006B 7D51              MOV     R5,#051H
006D 7C12              MOV     R4,#012H
006F 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 430
0072 900000      R     MOV     DPTR,#pllLock
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
0077 7F19              MOV     R7,#019H
0079 7E00              MOV     R6,#00H
007B 7D00              MOV     R5,#00H
007D 7C00              MOV     R4,#00H
007F 900000      R     MOV     DPTR,#timeout
0082 120000      E     LCALL   ?C?LSTXDATA
0085         ?C0021:
0085 900000      R     MOV     DPTR,#timeout
0088 120000      E     LCALL   ?C?LLDXDATA
008B D3                SETB    C
008C EF                MOV     A,R7
008D 9400              SUBB    A,#00H
008F EE                MOV     A,R6
0090 9400              SUBB    A,#00H
0092 404E              JC      ?C0022
0094 900000      R     MOV     DPTR,#pllLock
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 18  

0099 EF                MOV     A,R7
009A 6403              XRL     A,#03H
009C 6044              JZ      ?C0022
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
009E 904225            MOV     DPTR,#04225H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 5401              ANL     A,#01H
00A6 FF                MOV     R7,A
00A7 7E00              MOV     R6,#00H
00A9 900000      R     MOV     DPTR,#pllLock
00AC E0                MOVX    A,@DPTR
00AD FE                MOV     R6,A
00AE EE                MOV     A,R6
00AF 25E0              ADD     A,ACC
00B1 FE                MOV     R6,A
00B2 EE                MOV     A,R6
00B3 4F                ORL     A,R7
00B4 FF                MOV     R7,A
00B5 EF                MOV     A,R7
00B6 5403              ANL     A,#03H
00B8 FF                MOV     R7,A
00B9 900000      R     MOV     DPTR,#pllLock
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
00BE 7F78              MOV     R7,#078H
00C0 7E00              MOV     R6,#00H
00C2 7D00              MOV     R5,#00H
00C4 7C00              MOV     R4,#00H
00C6 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 435
00C9 900000      R     MOV     DPTR,#timeout
00CC 120000      E     LCALL   ?C?LLDXDATA
00CF 7BFF              MOV     R3,#0FFH
00D1 7AFF              MOV     R2,#0FFH
00D3 79FF              MOV     R1,#0FFH
00D5 78FF              MOV     R0,#0FFH
00D7 120000      E     LCALL   ?C?LADD
00DA 900000      R     MOV     DPTR,#timeout
00DD 120000      E     LCALL   ?C?LSTXDATA
00E0 80A3              SJMP    ?C0021
00E2         ?C0022:
                                           ; SOURCE LINE # 437
00E2 900000      R     MOV     DPTR,#timeout
00E5 120000      E     LCALL   ?C?LLDXDATA
00E8 EF                MOV     A,R7
00E9 4E                ORL     A,R6
00EA 7005              JNZ     ?C0024
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
00EC 7F03              MOV     R7,#03H
00EE 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 440
00F1         ?C0024:
                                           ; SOURCE LINE # 443
00F1 7B00              MOV     R3,#00H
00F3 7A40              MOV     R2,#040H
00F5 7904              MOV     R1,#04H
00F7 7D00              MOV     R5,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 19  

00F9 7C01              MOV     R4,#01H
00FB 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 444
00FE 904004            MOV     DPTR,#04004H
0101 7407              MOV     A,#07H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0104 904006            MOV     DPTR,#04006H
0107 E4                CLR     A
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
0109 904008            MOV     DPTR,#04008H
010C 7448              MOV     A,#048H
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
010F 904004            MOV     DPTR,#04004H
0112 E4                CLR     A
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0114 904001            MOV     DPTR,#04001H
0117 7402              MOV     A,#02H
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
011A 90400B            MOV     DPTR,#0400BH
011D 7404              MOV     A,#04H
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
0120 9043A2            MOV     DPTR,#043A2H
0123 E0                MOVX    A,@DPTR
0124 FF                MOV     R7,A
0125 EF                MOV     A,R7
0126 4401              ORL     A,#01H
0128 FF                MOV     R7,A
0129 9043A2            MOV     DPTR,#043A2H
012C EF                MOV     A,R7
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
012E 9043A1            MOV     DPTR,#043A1H
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 EF                MOV     A,R7
0134 4401              ORL     A,#01H
0136 FF                MOV     R7,A
0137 9043A1            MOV     DPTR,#043A1H
013A EF                MOV     A,R7
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
013C 9043A0            MOV     DPTR,#043A0H
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 4480              ORL     A,#080H
0144 FF                MOV     R7,A
0145 9043A0            MOV     DPTR,#043A0H
0148 EF                MOV     A,R7
0149 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
014A 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 476
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 20  

                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
002F 90510D            MOV     DPTR,#0510DH
0032 74FF              MOV     A,#0FFH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
0035 90514D            MOV     DPTR,#0514DH
0038 74FF              MOV     A,#0FFH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
003B 905B00            MOV     DPTR,#05B00H
003E 74F0              MOV     A,#0F0H
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
0041 905876            MOV     DPTR,#05876H
0044 7444              MOV     A,#044H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
0047 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 505
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 21  

0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0027
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4422              ORL     A,#022H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0025 800E              SJMP    ?C0028
0027         ?C0027:
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54DD              ANL     A,#0DDH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0035         ?C0028:
                                           ; SOURCE LINE # 516
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION _ADC_AMux_Set (BEGIN)
                                           ; SOURCE LINE # 547
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 549
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5036              JNC     ?C0031
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 22  

                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F FF                MOV     R7,A
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
0046         ?C0031:
0046 22                RET     
             ; FUNCTION _ADC_AMux_Set (END)

             ; FUNCTION _ADC_AMux_Unset (BEGIN)
                                           ; SOURCE LINE # 569
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5039              JNC     ?C0033
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 23  

0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EE                MOV     A,R6
003E F4                CPL     A
003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 5E                ANL     A,R6
0042 FF                MOV     R7,A
0043 D082              POP     DPL
0045 D083              POP     DPH
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
0049         ?C0033:
0049 22                RET     
             ; FUNCTION _ADC_AMux_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 600
0000 904800            MOV     DPTR,#04800H
0003 74F1              MOV     A,#0F1H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 602
0006 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 604
0009 904800            MOV     DPTR,#04800H
000C 74B1              MOV     A,#0B1H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 606
000F 7B00              MOV     R3,#00H
0011 7A46              MOV     R2,#046H
0013 79E8              MOV     R1,#0E8H
0015 120000      E     LCALL   _cyread8
0018 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 24  

0019 4405              ORL     A,#05H
001B FD                MOV     R5,A
001C 7B00              MOV     R3,#00H
001E 7A46              MOV     R2,#046H
0020 79E8              MOV     R1,#0E8H
0022 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
0025 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 612
0028 905883            MOV     DPTR,#05883H
002B 740A              MOV     A,#0AH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
002E 7B00              MOV     R3,#00H
0030 7A76              MOV     R2,#076H
0032 7900              MOV     R1,#00H
0034 7D04              MOV     R5,#04H
0036 7C00              MOV     R4,#00H
0038 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 614
003B 7B08              MOV     R3,#08H
003D 7A12              MOV     R2,#012H
003F 7988              MOV     R1,#088H
0041 C003              PUSH    AR3
0043 C002              PUSH    AR2
0045 C001              PUSH    AR1
0047 7B00              MOV     R3,#00H
0049 7A76              MOV     R2,#076H
004B 7950              MOV     R1,#050H
004D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0050 120000      E     LCALL   ?C?PSTXDATA
0053 D001              POP     AR1
0055 D002              POP     AR2
0057 D003              POP     AR3
0059 7F04              MOV     R7,#04H
005B 7E00              MOV     R6,#00H
005D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 617
0060 7B01              MOV     R3,#01H
0062 7A50              MOV     R2,#050H
0064 7903              MOV     R1,#03H
0066 120000      E     LCALL   _cyread8
0069 EF                MOV     A,R7
006A 4402              ORL     A,#02H
006C FD                MOV     R5,A
006D 7B01              MOV     R3,#01H
006F 7A50              MOV     R2,#050H
0071 7903              MOV     R1,#03H
0073 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 618
0076 7B01              MOV     R3,#01H
0078 7A50              MOV     R2,#050H
007A 7913              MOV     R1,#013H
007C 120000      E     LCALL   _cyread8
007F EF                MOV     A,R7
0080 4402              ORL     A,#02H
0082 FD                MOV     R5,A
0083 7B01              MOV     R3,#01H
0085 7A50              MOV     R2,#050H
0087 7913              MOV     R1,#013H
0089 120000      E     LCALL   _cywrite8
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 25  

                                           ; SOURCE LINE # 621
008C 9043A0            MOV     DPTR,#043A0H
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 4440              ORL     A,#040H
0094 FF                MOV     R7,A
0095 9043A0            MOV     DPTR,#043A0H
0098 EF                MOV     A,R7
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 622
009A 9043C2            MOV     DPTR,#043C2H
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 4410              ORL     A,#010H
00A2 FF                MOV     R7,A
00A3 9043C2            MOV     DPTR,#043C2H
00A6 EF                MOV     A,R7
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 626
00A8 7B08              MOV     R3,#08H
00AA 7A12              MOV     R2,#012H
00AC 7958              MOV     R1,#058H
00AE C003              PUSH    AR3
00B0 C002              PUSH    AR2
00B2 C001              PUSH    AR1
00B4 7B00              MOV     R3,#00H
00B6 7A51              MOV     R2,#051H
00B8 7902              MOV     R1,#02H
00BA 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00BD 120000      E     LCALL   ?C?PSTXDATA
00C0 D001              POP     AR1
00C2 D002              POP     AR2
00C4 D003              POP     AR3
00C6 7F08              MOV     R7,#08H
00C8 7E00              MOV     R6,#00H
00CA 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 627
00CD 7B08              MOV     R3,#08H
00CF 7A12              MOV     R2,#012H
00D1 7960              MOV     R1,#060H
00D3 C003              PUSH    AR3
00D5 C002              PUSH    AR2
00D7 C001              PUSH    AR1
00D9 7B00              MOV     R3,#00H
00DB 7A51              MOV     R2,#051H
00DD 7922              MOV     R1,#022H
00DF 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00E2 120000      E     LCALL   ?C?PSTXDATA
00E5 D001              POP     AR1
00E7 D002              POP     AR2
00E9 D003              POP     AR3
00EB 7F08              MOV     R7,#08H
00ED 7E00              MOV     R6,#00H
00EF 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 628
00F2 7B08              MOV     R3,#08H
00F4 7A12              MOV     R2,#012H
00F6 7968              MOV     R1,#068H
00F8 C003              PUSH    AR3
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 26  

00FA C002              PUSH    AR2
00FC C001              PUSH    AR1
00FE 7B00              MOV     R3,#00H
0100 7A51              MOV     R2,#051H
0102 7932              MOV     R1,#032H
0104 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0107 120000      E     LCALL   ?C?PSTXDATA
010A D001              POP     AR1
010C D002              POP     AR2
010E D003              POP     AR3
0110 7F08              MOV     R7,#08H
0112 7E00              MOV     R6,#00H
0114 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 629
0117 7B08              MOV     R3,#08H
0119 7A12              MOV     R2,#012H
011B 7970              MOV     R1,#070H
011D C003              PUSH    AR3
011F C002              PUSH    AR2
0121 C001              PUSH    AR1
0123 7B00              MOV     R3,#00H
0125 7A51              MOV     R2,#051H
0127 7942              MOV     R1,#042H
0129 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
012C 120000      E     LCALL   ?C?PSTXDATA
012F D001              POP     AR1
0131 D002              POP     AR2
0133 D003              POP     AR3
0135 7F08              MOV     R7,#08H
0137 7E00              MOV     R6,#00H
0139 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 630
013C 7B08              MOV     R3,#08H
013E 7A12              MOV     R2,#012H
0140 7978              MOV     R1,#078H
0142 C003              PUSH    AR3
0144 C002              PUSH    AR2
0146 C001              PUSH    AR1
0148 7B00              MOV     R3,#00H
014A 7A51              MOV     R2,#051H
014C 7960              MOV     R1,#060H
014E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0151 120000      E     LCALL   ?C?PSTXDATA
0154 D001              POP     AR1
0156 D002              POP     AR2
0158 D003              POP     AR3
015A 7F0A              MOV     R7,#0AH
015C 7E00              MOV     R6,#00H
015E 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 631
0161 9044F4            MOV     DPTR,#044F4H
0164 7401              MOV     A,#01H
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 634
0167 904322            MOV     DPTR,#04322H
016A E0                MOVX    A,@DPTR
016B FF                MOV     R7,A
016C EF                MOV     A,R7
016D 4408              ORL     A,#08H
016F FF                MOV     R7,A
0170 904322            MOV     DPTR,#04322H
0173 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 27  

0174 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 635
0175 9046EC            MOV     DPTR,#046ECH
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A EF                MOV     A,R7
017B C3                CLR     C
017C 9405              SUBB    A,#05H
017E 5006              JNC     ?C0034
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
0180 904689            MOV     DPTR,#04689H
0183 743A              MOV     A,#03AH
0185 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
0186         ?C0034:
                                           ; SOURCE LINE # 642
0186 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 645
0189 7B00              MOV     R3,#00H
018B 7A43              MOV     R2,#043H
018D 79A0              MOV     R1,#0A0H
018F C003              PUSH    AR3
0191 C002              PUSH    AR2
0193 C001              PUSH    AR1
0195 7B00              MOV     R3,#00H
0197 7A43              MOV     R2,#043H
0199 79B0              MOV     R1,#0B0H
019B 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
019E 120000      E     LCALL   ?C?PSTXDATA
01A1 D001              POP     AR1
01A3 D002              POP     AR2
01A5 D003              POP     AR3
01A7 7F0E              MOV     R7,#0EH
01A9 7E00              MOV     R6,#00H
01AB 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 646
01AE 9043B0            MOV     DPTR,#043B0H
01B1 E0                MOVX    A,@DPTR
01B2 FF                MOV     R7,A
01B3 EF                MOV     A,R7
01B4 54FD              ANL     A,#0FDH
01B6 FF                MOV     R7,A
01B7 EF                MOV     A,R7
01B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
01B9 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1365    ----
   CONSTANT SIZE    =    571    ----
   XDATA SIZE       =      4      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.51   CYFITTER_CFG                                                          12/03/2013 18:19:20 PAGE 28  

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
